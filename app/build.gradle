
plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

apply from: '../dependencies.gradle'
apply from: '../mavenConfig.gradle'

/**
 * 获取key路径，创建一份方法来获取key文件路径，jenkins和studio中可使用不同的路径
 * @return
 */
def getMyStoreFile() {
    System.out.println("normal")
    return file(project.APP_LOCAL_KEY_STORE)
}

android {

    signingConfigs {
        release {
          /*  keyAlias project.APP_ALAIS
            keyPassword project.APP_PSW
            storeFile getMyStoreFile()
            storePassword project.APP_STORE_PSW
            v1SigningEnabled true
            v2SigningEnabled true*/
        }

        debug {

           /* keyAlias project.APP_ALAIS
            keyPassword project.APP_PSW
            soreFile getMyStoreFile()
            storePassword project.APP_STORE_PSW*/
        }
    }

    compileSdkVersion rootProject.ext.versions.compileSdk
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libjingle_peerconnection_so.so'
    }

    defaultConfig {
        minSdk rootProject.ext.versions.minSdk
        targetSdkVersion rootProject.ext.versions.targetSdk
        versionCode rootProject.ext.versions.versionCode
        versionName rootProject.ext.versions.versionName


        ndk {
            abiFilters 'arm64-v8a'
        }


        applicationId "com.autel.drone.demo"
    }


    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.versions.javaCompatibility
        targetCompatibility rootProject.ext.versions.javaCompatibility
        encoding "UTF-8"
    }

    buildFeatures {
        viewBinding true
    }

}

def isBuildSnapshot = isBuildSnapshot(project)
configurations.all {
    if (isBuildSnapshot) {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar','*.aar'], dir: 'libs')
    implementation project(":debugtools")


    implementation rootProject.ext.deps.external.android.core_ktx
    implementation rootProject.ext.deps.external.android.design
}